<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documents on Da1sypetals</title>
    <link>https://da1sy-petals.vercel.app/documents/</link>
    <description>Recent content in Documents on Da1sypetals</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 16 Oct 2025 14:57:00 +0800</lastBuildDate>
    <atom:link href="https://da1sy-petals.vercel.app/documents/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PyG Batching</title>
      <link>https://da1sy-petals.vercel.app/documents/pyg-batching/</link>
      <pubDate>Thu, 16 Oct 2025 14:57:00 +0800</pubDate>
      <guid>https://da1sy-petals.vercel.app/documents/pyg-batching/</guid>
      <description>&lt;p&gt;内容来自&lt;a href=&#34;https://pytorch-geometric.readthedocs.io/en/latest/advanced/batching.html&#34;&gt;这里&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;高级 Mini-Batching（Mini-Batching）&lt;/p&gt;&#xA;&lt;p&gt;创建 mini-batching 对于让深度学习模型的训练扩展到海量数据至关重要。mini-batch 不会一个接一个地处理样本，而是将一组样本分组到一个统一的表示中，从而可以高效地并行处理。在图像或语言领域，这个过程通常是通过将每个样本重新缩放或 padding 到一组等大小的形状来实现的，然后将样本分组到一个额外的维度中。这个维度的长度等于分组在一个 mini-batch 中的样本数量，通常称为 batch_size。&lt;/p&gt;&#xA;&lt;p&gt;由于图是一种最通用的数据结构，可以包含任意数量的节点（nodes）或边（edges），因此上述两种方法要么不可行，要么可能导致大量不必要的内存消耗。在 PyG 中，我们采用另一种方法来实现对大量样本的并行化。在这里，adjacency matrices 以对角线方式堆叠（创建一个包含多个孤立子图的巨大图），并且节点和目标特征（features）简单地沿节点维度进行拼接，即：&lt;/p&gt;&#xA;$$&#xA;A = \begin{bmatrix} A_1 &amp; &amp; \\ &amp; \ddots &amp; \\ &amp; &amp; A_n \end{bmatrix}, \quad&#xA;X = \begin{bmatrix} X_1 \\ \vdots \\ X_n \end{bmatrix}, \quad&#xA;Y = \begin{bmatrix} Y_1 \\ \vdots \\ Y_n \end{bmatrix}.&#xA;$$&lt;p&gt;与其他 batching 过程相比，此过程具有一些关键优势：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;依赖于 message passing scheme 的 GNN operators 不需要修改，因为属于不同图的两个节点之间仍然不能交换消息。&lt;/li&gt;&#xA;&lt;li&gt;没有计算或内存开销。例如，此 batching 过程完全不需要对节点或边的特征进行任何 padding。请注意，adjacency matrices 没有额外的内存开销，因为它们以稀疏（sparse）方式保存，只包含非零项，即边。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;PyG 借助 &lt;code&gt;torch_geometric.loader.DataLoader&lt;/code&gt; 类自动将多个图 batch 成一个巨大的图。在内部，&lt;code&gt;DataLoader&lt;/code&gt; 只是一个常规的 PyTorch torch.utils.data.DataLoader，它重写了其 &lt;code&gt;collate()&lt;/code&gt; 功能，即定义如何将样本列表分组在一起。因此，所有可以传递给 PyTorch DataLoader 的参数也可以传递给 PyG &lt;code&gt;DataLoader&lt;/code&gt;，例如 worker 数量 &lt;code&gt;num_workers&lt;/code&gt;。&lt;/p&gt;</description>
    </item>
    <item>
      <title>我的萝卜头像</title>
      <link>https://da1sy-petals.vercel.app/documents/carrot/</link>
      <pubDate>Sun, 12 Oct 2025 15:29:58 +0800</pubDate>
      <guid>https://da1sy-petals.vercel.app/documents/carrot/</guid>
      <description>&lt;h2 id=&#34;矢量图&#34;&gt;矢量图&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/carrot.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;位图hires&#34;&gt;位图，hires&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/carrot_padded.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;位图lowres&#34;&gt;位图，lowres&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/carrot_540.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>全民K歌如何下载歌曲</title>
      <link>https://da1sy-petals.vercel.app/documents/quanmin-download/</link>
      <pubDate>Sun, 05 Oct 2025 21:07:06 +0800</pubDate>
      <guid>https://da1sy-petals.vercel.app/documents/quanmin-download/</guid>
      <description>&lt;h2 id=&#34;1-用默认浏览器打开&#34;&gt;1. 用默认浏览器打开&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/2025-10-05-21-08-03.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-按f12然后把focus放在html&#34;&gt;2. 按F12，然后把Focus放在html&lt;/h2&gt;&#xA;&lt;p&gt;先按F12，然后按下面的步骤操作&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/2025-10-05-21-10-32.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;3-搜索音频扩展名&#34;&gt;3. 搜索音频扩展名&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;先随便点一下里面的代码，然后 Ctrl-F&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;搜索&lt;code&gt;.m4a&lt;/code&gt;&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../images/2025-10-05-21-13-53.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ol start=&#34;3&#34;&gt;&#xA;&lt;li&gt;找到一个含有&lt;code&gt;.m4a&lt;/code&gt; 的链接，&lt;strong&gt;然后双击，复制到新的标签页打开&lt;/strong&gt;。很长一串&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;4-下载&#34;&gt;4. 下载&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;../2025-10-05-21-15-16.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pedalboard 文档</title>
      <link>https://da1sy-petals.vercel.app/documents/pedalboard/</link>
      <pubDate>Sat, 04 Oct 2025 14:20:22 +0800</pubDate>
      <guid>https://da1sy-petals.vercel.app/documents/pedalboard/</guid>
      <description>&lt;p&gt;Github: &lt;a href=&#34;https://github.com/spotify/pedalboard&#34;&gt;https://github.com/spotify/pedalboard&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Docs: &lt;a href=&#34;https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.LowShelfFilter&#34;&gt;https://spotify.github.io/pedalboard/reference/pedalboard.html#pedalboard.LowShelfFilter&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;pedalboard-api-documentation&#34;&gt;Pedalboard API Documentation&lt;/h1&gt;&#xA;&lt;p&gt;The &lt;code&gt;pedalboard&lt;/code&gt; module provides classes and functions for adding effects to audio. Most classes in this module are subclasses of &lt;code&gt;Plugin&lt;/code&gt;, each of which allows applying effects to an audio buffer or stream.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; For audio I/O functionality (i.e.: reading and writing audio files), see the &lt;code&gt;pedalboard.io&lt;/code&gt; module.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;The &lt;code&gt;pedalboard&lt;/code&gt; module is named after the concept of a guitar pedalboard, in which musicians will chain various effects pedals together to give them complete control over their sound. The &lt;code&gt;pedalboard&lt;/code&gt; module implements this concept with its main &lt;code&gt;Pedalboard&lt;/code&gt; class:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
